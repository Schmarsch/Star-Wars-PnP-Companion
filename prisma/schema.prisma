// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Character     Character[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id   String @id @default(cuid())
  name String

  ClassLevels ClassLevels[]
  Species     Species       @relation(fields: [speciesId], references: [id])

  ProficiencyBonus Int
  Initiative       Int

  // Ability Scores
  Strength     Int
  Dexterity    Int
  Constitution Int
  Intelligence Int
  Wisdom       Int
  Charisma     Int

  // Saving Throws
  savingThrowProficiencies String // split by comma

  // Skills
  skillProficiencies String // split by comma

  // Health
  maxHitPoints Int
  currentHP    Int
  tempHP       Int
  hitDice      Int
  hitDiceTotal Int

  // Death Saves
  deathSavesSuccesses Int
  deathSavesFailures  Int

  // Advantages, Resistances, and Immunities
  advantageAgainstSavingThrows String // split by comma
  advantageAgainstSkills       String // split by comma
  resistanceToDamageTypes      String // split by comma

  // Armor
  armorClass             Int
  mediumArmorProficiency Boolean
  armor                  Armor?  @relation(fields: [armorId], references: [id])
  armorId                Int?

  // Weapons
  weaponProficiencies String // split by comma
  weapons             Weapon[]

  // Character Data
  placeOfBirth String

  age    Int
  gender String
  height String
  weight String
  size   String
  hair   String
  eyes   String
  skin   String

  appearance         String
  personality        String
  ideals             String
  bonds              String
  flaws              String
  backgroundFeatures String
  backstory          String
  languages          String // split by comma
  features           String // split by comma

  // Valuables
  credits         Int
  gemsAndTreasure String // split by comma

  // Equipment
  Storage String // split by comma -- Just a string of the item names, the items themselves are stored in the inventory
  gear    Equipment[]

  // Powers
  techAttackModifier  Int
  techSaveDC          Int
  forceAttackModifier Int
  forceSaveDC         Int
  techPoints          Int
  techPointsUsed      Int
  forcePoints         Int
  forcePointsUsed     Int
  forcePowers         ForcePower[]
  techPowers          TechPower[]

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  speciesId Int
}

model Class {
  id                       Int           @id @default(autoincrement())
  name                     String
  description              String
  hitDie                   Int
  primaryAbility           String
  savingThrowProficiencies String // split by comma
  startingWealth           String
  ClassLevels              ClassLevels[]
}

model ClassLevels {
  id Int @id @default(autoincrement())

  level      Int
  class      Class       @relation(fields: [classId], references: [id])
  classId    Int
  Archetypes Archetype[]

  Character   Character @relation(fields: [characterId], references: [id])
  characterId String
}

model Species {
  id Int @id @default(autoincrement())

  name String

  // Visual Characteristics
  skinColors   String // split by comma
  hairColors   String // split by comma
  eyeColors    String // split by comma
  distinctions String // split by comma

  // Physical Characteristics
  averageHeight String
  averageWeight String

  // Sociocultural Characteristics
  language  String
  homeworld String

  // Descriptions
  biologyAndAppearance String
  societyAndCulture    String

  // Traits
  abilityScoreIncrease String // split by comma, format: "ability:amount"
  age                  String
  alignment            String
  size                 String
  speed                String
  Traits               Traits[]
  Character            Character[]
}

model Traits {
  id Int @id @default(autoincrement())

  name        String
  description String
  species     Species[]
}

model Archetype {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  ArchetypeAdvancement ArchetypeAdvancement[]
  ClassLevels          ClassLevels?           @relation(fields: [classLevelsId], references: [id])
  classLevelsId        Int?
}

model ArchetypeAdvancement {
  id Int @id @default(autoincrement())

  name        String
  description String

  level       Int
  archetype   Archetype @relation(fields: [archetypeId], references: [id])
  archetypeId Int
}

model Armor {
  id Int @id @default(autoincrement())

  name         String
  description  String
  cost         String
  armorClass   ArmorClass      @relation(fields: [armorClassId], references: [id])
  armorClassId Int
  weight       String
  properties   ArmorProperty[]
  Character    Character[]
}

model ArmorClass {
  id Int @id @default(autoincrement())

  name        String
  description String
  Don         String
  Doff        String
  Armor       Armor[]
}

model ArmorProperty {
  id Int @id @default(autoincrement())

  name        String
  description String
  Armor       Armor[]
}

model Weapon {
  id Int @id @default(autoincrement())

  name       String
  type       WeaponType       @relation(fields: [typeId], references: [id])
  typeId     Int
  properties WeaponProperty[]
  cost       String
  damage     String
  weight     String

  rangeNormal Int?
  rangeLong   Int?

  source String? // gonna see if this is even used, mostly for the GM

  Character Character[]
}

model WeaponType {
  id Int @id @default(autoincrement())

  name        String
  description String
  Weapon      Weapon[]
}

model WeaponProperty {
  id Int @id @default(autoincrement())

  name          String
  description   String
  requiredSkill Int? // If the weapon requires a skill to use, this number defines the minimum level

  Weapon Weapon[]
}

model Equipment {
  id Int @id @default(autoincrement())

  name        String
  category    String
  cost        String
  weight      String
  description String
  Character   Character[]
}

model ForcePower {
  id Int @id @default(autoincrement())

  name          String
  description   String
  castingTime   String
  range         String
  duration      String
  prerequisites String
  forcePotency  String

  minimumLevel Int
  Character    Character[]
}

model TechPower {
  id Int @id @default(autoincrement())

  name        String
  description String
  castingTime String
  range       String
  duration    String
  overcharge  String

  minimumLevel Int
  Character    Character[]
}

model Maneuver {
  id Int @id @default(autoincrement())

  name          String
  description   String
  prerequisites String
  type          String
}
